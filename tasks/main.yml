---
- name: "Include os specific variables"
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"

- name: "Update apt cache"
  ansible.builtin.apt:
    update_cache: true
  when: ansible_os_family == "Debian"
  changed_when: false

- name: "Ensure nfs dependencies are installed"
  ansible.builtin.package:
    name: "{{ deplist }}"
    state: present
  when: deplist is defined

- name: "Ensure pgbackup group exists"
  ansible.builtin.group:
    name: pgbackup
    state: present

- name: "Ensure pgbackup user exists"
  ansible.builtin.user:
    name: "pgbackup"
    comment: "Postgresql Backup User"
    group: "pgbackup"
    uid: "{{ postgresql_backup_uid | default(omit) }}"
    shell: '/bin/bash'
    createhome: true
    state: present

- name: "Install on Debian system"
  block:
    - name: Configure apt postgresql repository key
      ansible.builtin.apt_key:
        url: "{{ postgresql_apt_key_url }}"
        state: present

    - name: Configure apt postgresql repository
      ansible.builtin.apt_repository:
        repo: "{{ postgresql_apt_repo }}"
        state: present
        filename: "postgresql"

    - name: "Install required packages"
      ansible.builtin.apt:
        name: "{{ pkglist }}"
        update_cache: true
        autoremove: true
        state: present
  when: ansible_os_family == "Debian"

- name: "Install on Red Hat system"
  block:
    - name: "Disable postgresql native dnf module on EL8"
      ansible.builtin.copy:
        src: postgresql.module
        dest: "/etc/dnf/modules.d/postgresql.module"
        owner: root
        group: root
        mode: '0644'
      when: ansible_distribution_major_version == "8"
    - name: "Enable Postgresql yum repository"
      ansible.builtin.yum_repository:
        name: postgresql
        description: "Postgresql repository"
        file: "postgresql"
        baseurl: "{{ postgresql_yum_repo_url }}"
        gpgcheck: true
        gpgkey: "{{ postgresql_yum_key_url }}"

    - name: "Install required packages"
      ansible.builtin.package:
        name: "{{ pkglist }}"
        state: present
  when: ansible_os_family == "RedHat"

- name: "Ensure the target directory exists (can be used as mount point)"
  ansible.builtin.file:
    path: "{{ postgresql_backup_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: "Ensure nfs dependencies are installed"
  ansible.builtin.package:
    name: "{{ nfs_deps }}"
    state: present
  when: postgresql_backup_mount_type == "nfs"

- name: "Ensure the backup mount is defined"
  ansible.posix.mount:
    src: "{{ postgresql_backup_remote_mount_path }}"
    path: "{{ postgresql_backup_dir }}"
    opts: rw,noatime
    state: mounted
    fstype: "{{ postgresql_backup_mount_type }}"
    boot: true
  when: postgresql_backup_mount_type == "nfs"

- name: "Ensure the target directory for host exists and is writable"
  ansible.builtin.file:
    path: "{{ postgresql_backup_dir }}/{{ ansible_fqdn }}"
    state: directory
    owner: pgbackup
    group: pgbackup
    mode: '0755'

- name: "Copy the backup script"
  ansible.builtin.template:
    src: postgresql-backup.sh.j2
    dest: /usr/local/bin/postgresql-backup.sh
    owner: root
    group: root
    mode: '0755'

- name: "Ensure the configuration directory exists"
  ansible.builtin.file:
    path: "/etc/postgresql-backup"
    state: directory
    owner: pgbackup
    group: pgbackup
    mode: '0755'

- name: "Ensure connection settings are defined"
  ansible.builtin.lineinfile:
    path: /home/pgbackup/.pgpass
    line: "{{ item.postgresql_host | default(postgresql_backup_default_host) }}:{{ item.postgresql_port | default(postgresql_backup_default_port) }}:{{ item.database_name }}:{{ item.database_user }}:{{ item.database_password }}"
    create: true
    owner: pgbackup
    group: pgbackup
    mode: '0600'
  no_log: true
  loop: "{{ postgresql_backup_spec }}"
  when: postgresql_backup_spec is defined

- name: "Define backup settings"
  ansible.builtin.template:
    src: postgresql-backup.conf.j2
    dest: "/etc/postgresql-backup/{{ item.database_name }}.conf"
    owner: pgbackup
    group: pgbackup
    mode: '0644'
  no_log: true
  loop: "{{ postgresql_backup_spec }}"
  when: postgresql_backup_spec is defined

- name: "Create systemd service for the backup"
  ansible.builtin.template:
    src: postgresql-backup.service.j2
    dest: "/etc/systemd/system/postgresql-backup-{{ item.database_name }}.service"
    owner: root
    group: root
    mode: '0644'
  no_log: true
  loop: "{{ postgresql_backup_spec }}"
  when: postgresql_backup_spec is defined

- name: "Create systemd timer for the backup"
  ansible.builtin.template:
    src: postgresql-backup.timer.j2
    dest: "/etc/systemd/system/postgresql-backup-{{ item.database_name }}.timer"
    owner: root
    group: root
    mode: '0644'
  no_log: true
  loop: "{{ postgresql_backup_spec }}"
  when: postgresql_backup_spec is defined

- name: "Ensure systemd timers are enabled"
  ansible.builtin.systemd:
    name: postgresql-backup-{{ item.database_name }}.timer
    state: started
    enabled: true
    daemon_reload: true
  no_log: true
  loop: "{{ postgresql_backup_spec }}"
  when: postgresql_backup_spec is defined
